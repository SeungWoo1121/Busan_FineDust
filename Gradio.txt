from google.colab import files
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
import io

uploaded = files.upload()
data = pd.read_csv(io.StringIO(uploaded['result_dae_2.csv'].decode('euc-kr')))

pip install gradio

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
import gradio as gr

# 데이터 로드

locations = data.columns[1:]  # 첫 번째 행의 두 번째 열부터 지역값으로 사용합니다.
target_locations = locations.tolist()

# 함수 정의
def get_pm10_value(location):
    # 결과를 저장할 변수를 초기화합니다.
    result = ""

    # 입력된 지역과 일치하는 데이터를 찾아 예측합니다.
    for idx, loc in enumerate(locations):
        if target_locations[idx] == location:
            filtered_data = data[loc][(pd.to_numeric(data[loc], errors='coerce') >= pd.to_numeric(data[loc], errors='coerce').mean() - 2 * pd.to_numeric(data[loc], errors='coerce').std()) &
                                       (pd.to_numeric(data[loc], errors='coerce') <= pd.to_numeric(data[loc], errors='coerce').mean() + 2 * pd.to_numeric(data[loc], errors='coerce').std())]

            if filtered_data.empty:
                result = '데이터가 없습니다.'
                break

            # X와 y로 데이터를 분할합니다.
            X = filtered_data[:-1]
            y = filtered_data[1:]

            if len(X) == 0 or len(y) == 0:
                result = '데이터가 없습니다.'
                break

            # RandomForestRegressor 모델을 초기화하고 학습시킵니다.
            model = RandomForestRegressor()
            model.fit(X.values.reshape(-1, 1), y.values)

            # 가장 최근 데이터를 사용하여 내일의 미세먼지 값을 예측합니다.
            data[loc] = pd.to_numeric(data[loc], errors='coerce')
            filtered_data = data[loc].dropna()

            if filtered_data.empty:
                result = '데이터가 없습니다.'
                break

            prediction = model.predict(filtered_data.iloc[[-1]].values.reshape(1, -1))
            pm10_value = round(prediction[0], 2)

            # 미세먼지 농도 범주와 설명
            if pm10_value <= 30:
                category = "좋음"
                description = "미세먼지 농도가 매우 좋습니다."
            elif pm10_value <= 80:
                category = "보통"
                description = "미세먼지 농도가 보통 수준입니다."
            elif pm10_value <= 150:
                category = "나쁨"
                description = "미세먼지 농도가 나쁨 수준입니다."
            else:
                category = "매우나쁨"
                description = "미세먼지 농도가 매우 나쁨 수준입니다."

            result = f"{target_locations[idx]}: {pm10_value} (범주: {category}, 설명: {description})"
            break

    if result == "":
        result = '입력한 지역을 찾을 수 없습니다.'

    return result

# Gradio 인터페이스 설정
dropdown = gr.inputs.Dropdown(target_locations, label="지역 선택")
output_text = gr.outputs.Textbox(label="미세먼지 수치")

# 인터페이스 레이아웃 설정
layout = [
    [dropdown],
    [output_text]
]

# 인터페이스 실행
iface = gr.Interface(fn=get_pm10_value, inputs=dropdown, outputs=output_text, title="미세먼지 수치 예측", description="지역을 선택하면 해당 지역의 미세먼지 수치와 범주, 설명을 예측합니다.", layout=layout)
iface.launch(share=True)
